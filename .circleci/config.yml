# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      #- image: circleci/openjdk:11-jdk
      # - image: azul/zulu-openjdk:11
      - image: jetty:9.4.35-jre11
        # user: root
      # https://stackoverflow.com/questions/50320263/change-user-on-circleci

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:      
      - checkout

      # /var/lib/jetty/repo
      - run: pwd
      # /var/lib/jetty/repo/build.gradle
      - run: ls -al .

      # Download and cache dependencies
      # https://circleci.com/docs/2.0/caching/
      - restore_cache:
          keys:
          - gradle-repo-v1-{{ .Branch }}-{{ checksum "build.gradle" }}
          - gradle-repo-v1-{{ .Branch }}-
          - gradle-repo-v1-

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-repo-v1-{{ .Branch }}-{{ checksum "build.gradle" }}
              
      # install tool screen
      - run: 
          name: install tool screen
          command: root
            cat /etc/*-release
            apt update -y
            apt install screen -y
            screen â€“version

  test:
    docker:
      - image: jetty:9.4.35-jre11
        user: root
    steps:                  
      - checkout

      # build application
      - run: ./gradlew clean build

      # start webserver on project
      - run: screen -d -m -s "webapp_on_project" ./gradlew appRun

      # archives all configured gretty products.
      - run: ./gradlew archiveAllProducts

      # start webserver on local
      - run: screen -d -m -s "webapp_on_local" ./build/output/_gradle_java/start.sh

      # start webserver on docker
      - run: ls -al /var/lib/jetty/webapps/
      - run: cp -rf ./build/libs/_gradle_java.war /var/lib/jetty/webapps/ROOT.war

      # access the web server on docker
      - run: curl http://localhost:8080/